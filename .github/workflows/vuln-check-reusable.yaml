name: Vulnerability Check

on:
  workflow_call:
    inputs:
      target-ref:
        description: 'Target ref (branch, tag, release) to scan'
        required: true
        type: string
        default: 'main'
      find-latest-release:
        description: 'Flag to find the latest version for specified `target-ref`'
        required: false
        type: boolean
        default: false
      images:
        description: "JSON string representing a list of pairs of names and image base names of Docker images. For example, if `'[[\"ScalarDL Ledger\", \"scalar-ledger\"], [\"ScalarDL Auditor\", \"scalar-auditor\"]'` is specified, the scanner will scan `ghcr.io/scalar-labs/scalar-ledger:<tag>` and `ghcr.io/scalar-labs/scalar-auditor:<tag>`."
        required: true
        type: string
      version-command:
        description: 'Shell command that prints the version string. It is used as the tag for Docker images to be scanned.'
        required: false
        type: string
        default: "./gradlew :common:properties -q | grep version: | awk '{print $2}'"
    secrets:
      SLACK_SECURITY_WEBHOOK_URL:
        description: 'Slack webhook URL to post vulnerability check failure. If empty, the action will not post a message.'
        required: false

env:
  TERM: dumb

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout vuln-check scripts
        uses: actions/checkout@v4
        with:
          repository: scalar-labs/actions
          sparse-checkout: vuln-check-script
          ref: main
          path: vuln-check

      - id: prepare-target-ref
        name: Prepare target-ref
        env:
          SCRIPT_PATH: ./vuln-check/vuln-check-script
        run: |
          # Find the latest release name if `find-latest-release` is set to true. Use the value of `target-ref` as is otherwise.
          if [[ ${{ inputs.find-latest-release }} = 'true' ]]; then
            releases=$($SCRIPT_PATH/fetch_gh_releases "${{ github.event.repository.owner.login }}" "${{ github.event.repository.name }}")
            echo -------------
            echo "releases: $releases"
            echo -------------
            target_release=''
            if [[ -n $releases ]]; then
              target_release=$($SCRIPT_PATH/find_latest_release "${{ inputs.target-ref }}" $releases)
            fi
            if [[ -z $target_release ]]; then
              echo "Can't find a target release"
              exit 1
            fi
            echo $target_release
            echo "target-ref=$target_release" >> $GITHUB_OUTPUT
          else
            echo "target-ref=${{ inputs.target-ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout the target repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.prepare-target-ref.outputs.target-ref }}

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Docker build
        run: ./gradlew docker

      - name: Set version
        id: version
        run: |
          VERSION=$(${{ inputs.version-command }})
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Save Docker images
        run: |
          mkdir -p images_output
          for label in $(echo '${{ inputs.images }}' | jq -r .[][1])
          do
              image="ghcr.io/scalar-labs/${label}:${{ steps.version.outputs.version }}"
              docker save $image | gzip > images_output/${label}.tar.gz
          done

      - name: Upload images as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-${{ github.run_id }}-${{ github.run_attempt }}-${{ inputs.target-ref }}
          path: images_output
          retention-days: 1

  vuln-check:
    runs-on: ubuntu-latest

    needs: build

    strategy:
      matrix:
        image: ${{ fromJSON(inputs.images) }}
      fail-fast: false
      max-parallel: 1

    continue-on-error: true

    steps:
      - name: Check if Slack webhook URL is set
        id: slack-webhook
        run: |
          if [[ -n "${{ secrets.SLACK_SECURITY_WEBHOOK_URL }}" ]]; then
            echo "Slack webhook URL is set. Post a message if the vulnerability check fails."
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "Slack webhook URL is not set. Skip posting a message."
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: Download Docker images artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-images-${{ github.run_id }}-${{ github.run_attempt }}-${{ inputs.target-ref }}

      - name: Load Docker image
        run: docker load -i ${{ matrix.image[1] }}.tar.gz

      - name: Run Trivy vulnerability scanner for ${{ matrix.image[0] }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/scalar-labs/${{ matrix.image[1] }}:${{ needs.build.outputs.version }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '60m'

      - name: Post Trivy vulnerability check failure for ${{ matrix.image[0] }}
        if: failure() && steps.slack-webhook.outputs.enabled == 'true'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_SECURITY_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":octagonal_sign: The vulnerability check for ${{ matrix.image[0] }} on `${{ github.repository }}` <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|failed> with `${{ inputs.target-ref }}`"

